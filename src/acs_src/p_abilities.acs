#library "JPMOBILITY"
#include "zcommon.acs"

//This code is hellspawn. If you can make sense of it and fix it up for your own projects, go ahead. Just toss me some credit and s'all good. -JetPlane

#DEFINE HUD_X 320
#DEFINE HUD_Y 240
#DEFINE HTIC 1.0/35 + 1

#DEFINE SLIDEPOWER 1.0

#DEFINE STAMINATAKESLIDE 20
#DEFINE STAMINATAKEJUMP 30
#DEFINE CAMLOWER 6.0

global int 56:camheight;

Script "JPMobilityEnter" ENTER
{

	ACS_NamedExecuteAlways("JPMobilityInit",0,0,0,0);
	
}

Script "JPMobilitySpawn" RESPAWN
{

	ACS_NamedExecuteAlways("JPMobilityInit",0,0,0,0);
	
}

Script "JPMobilityInit" (void)
{

	if(camheight > 0)
	{
	
		SetActorProperty(0,APROP_VIEWHEIGHT,camheight);
	
	}
	
	TakeInventory("SpectreSliding",9999);
	GiveInventory("SpectreSlideAttempt",1);
	GiveInventory("SpectreSlideCancel",1);
	GiveInventory("MobilityStamina",100);
	
	ACS_NamedExecuteAlways("SpectreSlide",0,0,0,0);
	ACS_NamedExecuteAlways("SpectreJump",0,0,0,0);
	ACS_NamedExecuteAlways("SpectreLatch",0,0,0,0);
	
	ACS_NamedExecuteAlways("SpectreDishStam",0,0,0,0);
	ACS_NamedExecuteAlways("SpectreDrawStam",0,0,0,0);

}

//actual scripts
Script "SpectreSlide" (void)
{
	
	int slideangle = 0;
	int curhealth = 100;
	
	while(curhealth > 0)
	{	
		int cvarslide = GetCvar("jpm_enable_slide");
		
		if(cvarslide == 1)
		{
			int keydown = GetPlayerInput(-1,INPUT_BUTTONS);
			
			curhealth = GetActorProperty(0,APROP_HEALTH);
			
			int slideme = CheckInventory("SpectreSlide");
			int sliding = CheckInventory("SpectreSliding");
			
			int xv = GetActorVelX(0);
			int yv = GetActorVelY(0);
			int zv = GetActorVelZ(0);
			
			int x = GetActorX(0);
			int y = GetActorY(0);
			int z = GetActorZ(0) - GetActorFloorZ(0);
			
			
			if(slideme == 1 && sliding < 1 && CheckInventory("MobilityStamina") > STAMINATAKESLIDE - 1 && z < 1.0)
			{
				
				GiveInventory("DuckOn",1);
				GiveInventory("SpectreSliding",10);
				slideangle = GetActorAngle(0);
				int slidevel = GetCvar("jpm_pref_slidevel");
				
				SetActorVelocity(0,xv + FixedMul(cos(slideangle),slidevel),yv + FixedMul(sin(slideangle),slidevel),0.0,0,0);
				
				camheight = GetActorProperty(0,APROP_VIEWHEIGHT);
				
				SetActorProperty(0,APROP_VIEWHEIGHT,FixedDiv(camheight,CAMLOWER));
				
				PlaySound(0,"misc/ninjaslide");
				
				TakeInventory("MobilityStamina",STAMINATAKEJUMP);
			
			}
			
			if(sliding > 0)
			{
				if(z == 0.0)
				{
					SetActorVelocity(0,xv + FixedMul(cos(slideangle),1.0),yv + FixedMul(sin(slideangle),1.0),0.0,0,0);

				}
				
				if((keydown & BT_JUMP))
				{
				
				
					TakeInventory("SpectreSliding",999);
					SetActorProperty(0,APROP_VIEWHEIGHT,camheight);
	
				}
				
				else
				{
				
					TakeInventory("SpectreSliding",1);
				
				}
				
				if((sliding - 1) == 0)
				{	
					
					int currentlow = CAMLOWER;
					
					while(currentlow > 1.0)
					{
						
						if(currentlow < 1.0)
						{
						
							currentlow = 1.0;
						
						}
						
						SetActorProperty(0,APROP_VIEWHEIGHT,FixedDiv(camheight,currentlow));
						currentlow -= 0.5;
						Delay(1);
						
					}
				
					SetActorProperty(0,APROP_VIEWHEIGHT,camheight);
					SetActorFlag(0,"SHOOTABLE",1);
					GiveInventory("DuckOff",1);
					Delay(1);
					
				}
				
			}
			
		}
		
		Delay(1);
		
	}
	
}

Script "SpectreJump" (void)
{
	
	int onground = 1;
	int curhealth = 100;
	int previouslytapped = 0;
	
	while(curhealth > 0)
	{	
		int cvarjump = GetCvar("jpm_enable_djump");
		
		if(cvarjump == 1)
		{
			curhealth = GetActorProperty(0,APROP_HEALTH);
			
			int keydown = GetPlayerInput(-1,INPUT_BUTTONS);
			
			int attempthop = (keydown & BT_JUMP);
			
			int canhop = CheckInventory("SpectreHop");
			int sliding = CheckInventory("SpectreSliding");
			
			int xv = GetActorVelX(0);
			int yv = GetActorVelY(0);
			int zv = GetActorVelZ(0);
			
			int z = GetActorZ(0) - GetActorFloorZ(0);
				
			//jumpity jump
			if(z < 0.1)
			{
					
				if(canhop < 1)
				{
					
					GiveInventory("SpectreHop",1);
					
				}
					
					
			}
			//double jump
			if(attempthop && previouslytapped == 0 && z > 0.0 && zv < -0.0 && canhop == 1 && CheckInventory("MobilityStamina") > STAMINATAKEJUMP - 1)
			{
					
				int angle = GetActorAngle(0);
					
				PlaySound(0,"MOBILITY/DOUBLE");
					
				TakeInventory("SpectreHop",1);
				TakeInventory("MobilityStamina",STAMINATAKEJUMP);
					
				SetActorVelocity(0,xv + FixedMul(cos(angle),5.0),yv + FixedMul(sin(angle),5.0),12.0,0,1);
				
					
			}
			
			if(attempthop && previouslytapped == 0)
			{
			
				previouslytapped = 1;
				
			}
			else if(!attempthop && previouslytapped == 1)
			{
					
				previouslytapped = 0;
					
			}
			
			if(onground == 0 && z < 1.0)
			{
			
				onground = 1;
				
				if(sliding == 0)
				{
					PlaySound(0,"SPECTRE/LAND");
				}
			
			
			}
			else if(onground == 1 && z > 30.0)
			{
			
				onground = 0;
			
			
			}
		
		}
		Delay(1);
	
	}

}

Script "SpectreLatch" (void)
{
	
	int curlatch = 0;
	int curhealth = 100;
	
	int stickx = 0;
	int sticky = 0;
	int stickz = 0;
	
	while(curhealth > 0)
	{	
	
		int cvarlatch = GetCvar("jpm_enable_latch");
		
		if(cvarlatch == 1)
		{
	
			curhealth = GetActorProperty(0,APROP_HEALTH);
			
			int keydown = GetPlayerInput(-1,INPUT_BUTTONS);
			
			int latched = CheckInventory("SpectreLatched");
			
			int xv = GetActorVelX(0);
			int yv = GetActorVelY(0);
			int zv = GetActorVelZ(0);
			
			int ang = GetActorAngle(0);
			
			int z = GetActorZ(0) - GetActorFloorZ(0);
				
			if(z > 1.0 && (keydown & BT_USE) && latched == 0 && CheckInventory("MobilityStamina") > 5)
			{
				
				SpawnProjectile(0,"SpectreLatcher",ang >> 8,200,0,0,0);
			
			}
			
			if(latched == 1 && curlatch == 0)
			{
			
				curlatch = 1;
				
				PlaySound(0,"MOBILITY/CLING");
				
				GiveInventory("SpectreHop",1);
				
				stickx = GetActorX(0);
				sticky = GetActorY(0);
				stickz = GetActorZ(0);
			}
			
			else if(curlatch == 1 && (!(keydown & BT_USE) || CheckInventory("MobilityStamina") < 1))
			{
			
				TakeInventory("SpectreLatched",1);
				curlatch = 0;
				
				SetActorVelocity(0,xv + FixedMul(cos(ang),10.0),yv + FixedMul(sin(ang),10.0),4.0,0,1);
				
				
			
			}
			
			else if(latched == 0 && z > 1.0)
			{
				
				if(keydown & (BT_FORWARD|BT_BACK|BT_MOVELEFT|BT_MOVERIGHT))
				{
					int sidemove = GetPlayerInput(-1,INPUT_SIDEMOVE);
					int forwardmove = GetPlayerInput(-1,INPUT_FORWARDMOVE);
				
					int angle = GetActorAngle(0) - VectorAngle(forwardmove,sidemove);
				
					SetActorVelocity(0,xv + FixedMul(cos(angle),0.5),yv + FixedMul(sin(angle),0.5),zv,0,1);
				}
			}
			
			latched = CheckInventory("SpectreLatched"); //recheck
			
			if(latched == 1)
			{
				
				SetActorVelocity(0,0,0,0,0,0);
				
				if(VectorLength(((stickx) - (GetActorX(0))) >> 16,((sticky) - (GetActorY(0))) >> 16) > 0)
				{
				
					SetActorPosition(0,stickx,sticky,stickz,0);
					
				}
				
				TakeInventory("MobilityStamina",1);
				
			}
			
		
			Delay(1);
		
		}
		
	}

}

Script "SpectreDishStam" (void)
{
	
	int curhealth = 100;
	
	while(curhealth > 0)
	{	

		curhealth = GetActorProperty(0,APROP_HEALTH);
		
		int stamina = CheckInventory("MobilityStamina");
		
		if(stamina < 100)
		{
			
			GiveInventory("MobilityStamina",1);
			
		}
		
		Delay(2);
	
	}
}

Script "SpectreDrawStam" (void) CLIENTSIDE
{
	
	int curhealth = 100;
	int hasblipped = 1;
	
	while(curhealth > 0)
	{	
		
		int cvarbar = GetCvar("jpm_draw_staminabar");
		
		if(cvarbar == 1)
		{
		
			curhealth = GetActorProperty(0,APROP_HEALTH);
			
			int stamina = CheckInventory("MobilityStamina");
			
			SetHudSize(HUD_X,HUD_Y,0);
			
			if(stamina < 100)
			{
				
				int offsety = 15;
				int offsetwidth = 30;
				
				int percent = offsetwidth - ((100 - stamina)*offsetwidth)/100;
				
				SetHudClipRect(HUD_X/2 - offsetwidth/2,HUD_Y/2,percent,30,0,1);
				SetFont("RADBARC");
				HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP,0,CR_WHITE,1.0 + (HUD_X/2 << 16),1.0 + ((HUD_Y/2 + offsety) << 16),HTIC,1.0);
				
				SetHudClipRect(0,0,0,0,0);
				SetFont("RADBARB");
				HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP,0,CR_WHITE,1.0 + (HUD_X/2 << 16),1.0 + ((HUD_Y/2 + offsety) << 16),HTIC,1.0);
				
			}
			
			if(hasblipped == 0 && stamina > 99)
			{
				hasblipped = 1;
				
				int flash = 3;
				
				while(flash > 0)
				{
					SetFont("RADBARR");
					HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP,0,CR_WHITE,1.0 + (HUD_X/2 << 16),1.0 + ((HUD_Y/2 + offsety) << 16),FixedMul(HTIC,2.0),1.0);

					Delay(2);
					
					SetFont("RADBARC");
					HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP,0,CR_WHITE,1.0 + (HUD_X/2 << 16),1.0 + ((HUD_Y/2 + offsety) << 16),FixedMul(HTIC,2.0),1.0);
				
					Delay(2);
					
					flash--;
				}
				Delay(1);
				SetFont("RADBARR");
				HudMessage(s:"A";HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP,0,CR_WHITE,1.0 + (HUD_X/2 << 16),1.0 + ((HUD_Y/2 + offsety) << 16),HTIC,1.0);
				
				SetFont("RADBARC");
				HudMessage(s:"A";HUDMSG_FADEOUT|HUDMSG_NOTWITHFULLMAP,0,CR_WHITE,1.0 + (HUD_X/2 << 16),1.0 + ((HUD_Y/2 + offsety) << 16),0.1,0.2,1.0);
			}
			else if(hasblipped == 1 && stamina < 100)
			{
			
				hasblipped = 0;
			
			}
		
		}
		
		Delay(1);
	
	}
}