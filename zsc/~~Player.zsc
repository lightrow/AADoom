
// Dusk Movement - Ivory Duke
Class VoyageGal : DoomPlayer replaces DoomPlayer
{
	int CROUCHDURATION;
	float CROUCHSPEED;
	int CROUCHUSECD;
	int tickCount;
	int exhaleTick;
	
	bool heartbeat1;
	bool heartbeat2;
	bool redscreen;
	bool pulsing;
	
	int redscreenTick;
	
	int overhealTick;
	
	bool playRelief;
	//Crouch Slide
	bool	SlideInProgress;		//From the beginning of a slide until some tics later you cannot slide again (no spam plz)
	uint 	CrouchTime;			//Checks for how long you are holding the crouch button, needed to determine when crouchslide should end
	uint	CrouchCD;
	double 	MaximumGroundSpeed;		//The maximum speed player can reach why running on the ground, calculated depending on the chosen settings
	int lastHealth;
	vector2	MoveVec;
	Footsteps fsteps;
		
	Default
	{
	player.startitem "Handcannon";
	player.startitem "FireAxe";
	Player.StartItem "Clip", 35;
	Player.StartItem "PistolLoad", 10;
	Player.WeaponSlot 1, "FireAxe";
   	Player.WeaponSlot 2, "Handcannon";
	Player.WeaponSlot 3, "Scattergun", "DoubleRifle";
	Player.WeaponSlot 4, "Famas";
	Player.WeaponSlot 5, "Bazooka";
	Player.WeaponSlot 6, "PlasmaCannon";
	Player.WeaponSlot 7, "PlasmaHowitzer";
	Player.DamageScreenColor "99 00 18";
	radius 16;
	height 56;
	Player.ViewHeight 42;
	Player.ForwardMove 1;
    Player.SideMove 1;
	Player.DisplayName "HonHon";

	PainChance 255;
	DamageFactor "NadeBoom", 0.35; // no suicidal grenades
	//DamageFactor "Melee", 1.5;
	}
	States
	{
	Death:
		PD71 A 3;
		PD71 B 3 A_PlayerScream;
		PD71 C 3 A_NoBlocking;
		PD71 DEFGH 3;
		PD71 I -1;
		Stop;
	XDeath:
		PD71 A 3;
		PD71 B 3 A_PlayerScream;
		PD71 C 3 A_NoBlocking;
		PD71 DEFGH 3;
		PD71 I -1;
		Stop;
	}

	override void PostBeginPlay()
	   {
		  Super.PostBeginPlay();
		  Actor fstepsActor = Spawn("Footsteps",pos);
		  if(fstepsActor != null)
		  {
			 fsteps = Footsteps(fstepsActor);
			 fsteps.Init(self);
		  }
	   }

	
	override void BeginPlay() {
		CROUCHSPEED = (1./6);
		CROUCHDURATION = GetCvar("vi_crouchduration");
		CROUCHUSECD = CROUCHDURATION + 35;
		
		CrouchCD = 0;
		lastHealth = health;
		tickCount = 0;
		redscreenTick = 0;
		overhealTick = 0;
		heartbeat1 = false;
		heartbeat2 = false;
		redscreen = false;
		pulsing = false;
		exhaleTick = 0;
		playRelief = false;
		Super.BeginPlay();
	}

	
	override void Tick()
	{
		if (!player || !player.mo || player.mo != self)
		{
			Super.Tick();
			return;
		}
		checkCrouchTime();
		checkRage();
		checkHeartBeat();	
		checkRedScreen();
		checkOverheal();
		Super.Tick();
	}
	
	void checkOverheal() {
		if (G_SkillPropertyInt(SKILLP_ACSReturn) != 666 && G_SkillPropertyInt(SKILLP_ACSReturn) != 999 ) {
			return;
		}
		overhealTick++;
		if (overhealTick > 35 && player.mo.health > 100){
			A_SetHealth(player.mo.health-1);
			// directly changing player.mo.health causes health desync. Bug?
			overhealTick = 0;
		}
	}
	
	void checkRedScreen() {
		if (redscreen){
			if (!pulsing){
				pulsing = true;
				A_SetBlend("00 00 00", 0.0, 31, "99 00 18", 0.2);
			}
			redscreenTick++;
			if (redscreenTick == 30) {
				A_SetBlend("99 00 18", 0.2, 31, "99 00 18", 0.0);
			} 
			if (redscreenTick == 60) {
				A_SetBlend("99 00 18", 0.0, 31, "99 00 18", 0.2);
				redscreenTick = 0;
			} 
		} else if (pulsing) {
			redscreenTick = 0;
			pulsing = false;
			A_SetBlend("99 00 18",0.2,60);
		}
	}
	
	void checkCrouchTime(){
		if (player != NULL && player.mo == self && player.playerstate != PST_DEAD)
		{
			Height = FullHeight * player.crouchfactor;
		}
		else
		{
			if (health > 0) Height = FullHeight;
		}
		
		if (CrouchCD > 0) {
			CrouchCD++;
		}
		
		if (CrouchCD > CROUCHUSECD) {
			CrouchCD=0;
		}
		
		if (CrouchTime == 1){
			exhaleTick=1;
		}
		if (exhaleTick>0){
			exhaleTick++;
			if (exhaleTick>4) {
				exhaleTick=0;
				A_PlaySound("player/exhale",2);
			}
		}
		
	}
	
	void checkRage(){
		tickCount++;
		if (tickCount > 16) {
			tickCount = 0;
			if (CheckInventory("PowerStrength",1) && !CheckInventory("Rage",1)) {
				A_TakeInventory("PowerStrength",1);
			}
			A_TakeInventory("Rage",1);
			int diff = lastHealth - health;		
			if (playRelief) {
				A_PlaySound("player/relief",2);
				playRelief = false;
			}
			if (diff < -40 && health > 0) {
				playRelief = true;
			}
			if (diff > 6 && health > 0) {
			   A_GiveInventory("Rage",3);
			}
			if (diff > 10 && health > 0) {
			   A_GiveInventory("Rage",7);
			}
			if (diff > 30 && health > 0) {
				A_PlaySound("player/breath",7);
				A_GiveInventory("Rage",20);
			}
			lastHealth = health;
		}
		if (G_SkillPropertyInt(SKILLP_ACSReturn) != 666 && G_SkillPropertyInt(SKILLP_ACSReturn) != 999 ) {
			return;
		}
		double rage = countinv("Rage");
		double damageReductionFactor = min((rage / 35) / 2, 0.5);
		damagefactor = 1.15 - damageReductionFactor;
	}
	
	void checkHeartBeat()
	{
		if (!GetCvar("vi_redscreen")) {
			return;
		}
		if (health > 20 && health < 35 && !heartbeat1) {
			heartbeat1 = true;
			heartbeat2 = false;
			redscreen = false;
			A_PlaySound("player/heartbeat1",5,0.5,1);
		}
		if (health > 0 && health <=20 && !heartbeat2) {
			heartbeat2 = true;
			redscreen = true;
			heartbeat1 = false;
			A_PlaySound("player/heartbeat2",5,1,1);
		}
		if (health >= 35 && (heartbeat1 || heartbeat2)) {
			heartbeat1 = false;
			redscreen = false;
			heartbeat2 = false;
			A_StopSound(5);
		}
	}
	
	
	override void CrouchMove(int direction)
	{
		let player = self.player;
		
		double defaultheight = FullHeight;
		double savedheight = Height;
		double crouchspeed = direction * CROUCHSPEED;
		double oldheight = player.viewheight;

		player.crouchdir = direction;
		player.crouchfactor += crouchspeed ;

		// check whether the move is ok
		Height  = defaultheight * player.crouchfactor;
		if (!TryMove(Pos.XY, false, NULL))
		{
			Height = savedheight;
			if (direction > 0)
			{
				// doesn't fit
				player.crouchfactor -= crouchspeed;
				return;
			}
		}
		Height = savedheight;

		player.crouchfactor = clamp(player.crouchfactor, 0.2, 1.);
		player.viewheight = ViewHeight * player.crouchfactor;
		player.crouchviewdelta = player.viewheight - ViewHeight;

		// Check for eyes going above/below fake floor due to crouching motion.
		CheckFakeFloorTriggers(pos.Z + oldheight, true);
	}



	Override void CheckCrouch(bool totallyfrozen)
	{
		let player = self.player;
		UserCmd cmd = player.cmd;
		
		if (cmd.buttons & BT_JUMP)
		{
			cmd.buttons &= ~BT_CROUCH;
		}
		if (player.health > 0) //Screw you Boom mapsets crouch is always allowed
		{
			if (!totallyfrozen)
			{
				int crouchdir = player.crouching;

				if (crouchdir == 0)
				{
					crouchdir = (cmd.buttons & BT_CROUCH) ? -1 : 1;
				}
				else if (cmd.buttons & BT_CROUCH)
				{
					player.crouching = 0;
				}
				if (height == 56) {
					CROUCHSPEED = (1./6);
				}
				if (CrouchTime > CROUCHDURATION) {
					CrouchTime = 0;
					CROUCHSPEED = (1./17);
					A_TakeInventory("isSliding",0);
				}
				if (CrouchTime == 0 && crouchdir == 1 && player.crouchfactor < 1 && pos.Z + height < ceilingz)
				{
					CrouchMove(1);
					
				}
				else if (crouchdir == -1 && player.crouchfactor > 0.5)
				{
					CROUCHSPEED = (1./6);
					CrouchMove(-1);
				}
			}
		}
		else
		{
			player.Uncrouch();
		}

		player.crouchoffset = -50 + -(ViewHeight) * (1 - player.crouchfactor);
	}
	
	
	Override void MovePlayer()
	{
		let player = self.player;
		UserCmd cmd = player.cmd;
		//Imput conditions necessary to activate crouch slide. Slide needs to be started on the ground but can continue mid air
		Bool CrouchSlide;
		// [RH] 180-degree turn overrides all other yaws
		if (player.turnticks)
		{
			player.turnticks--;
			Angle += (180. / TURN180_TICKS);
		}
		else
		{
			Angle += cmd.yaw * (360./65536.);
		}

		player.onground = (pos.z <= floorz) || bOnMobj || bMBFBouncer || (player.cheats & CF_NOCLIP2);

		//Wherever the slide should end or can continue
		bool BlockSlide;

		if(!CrouchTime)
		CrouchSlide = Player.OnGround && (player.cmd.buttons & BT_CROUCH); //&& (cmd.forwardmove || cmd.sidemove);
		else
		CrouchSlide = (player.cmd.buttons & BT_CROUCH) && Vel.Length() > 0.64 * MaximumGroundSpeed;
		


		// killough 10/98:
		//
		// We must apply thrust to the player and bobbing separately, to avoid
		// anomalies. The thrust applied to bobbing is always the same strength on
		// ice, because the player still "works just as hard" to move, while the
		// thrust applied to the movement varies with 'movefactor'.

		if (cmd.forwardmove | cmd.sidemove)
		{
			double forwardmove, sidemove;
			double bobfactor;
			double friction, movefactor;
			double fm, sm;

			[friction, movefactor] = GetFriction();
			bobfactor = friction < ORIG_FRICTION ? movefactor : ORIG_FRICTION_FACTOR;
			if (!player.onground && !bNoGravity && !waterlevel)
			{
				// [RH] allow very limited movement if not on ground.
				movefactor *= level.aircontrol;
				bobfactor*= level.aircontrol;
			}

			fm = cmd.forwardmove;
			sm = cmd.sidemove;
			[fm, sm] = TweakSpeeds (fm, sm);
			fm *= Speed / 256;
			sm *= Speed / 256;
			
			If(Player.CrouchFactor != 1 && (CrouchCD == 0 || CrouchTime > 0))
			{
				CrouchTime++;	
				if(CrouchTime == 1 && CrouchSlide)
				{
					A_PlaySound("Slide",4);
					A_GiveInventory("isSliding",1);
					CrouchCD = 1;
				}
				
				//We make sure that even if player is holding sprint the crouch speed is unchanged
				//Slide is less powerful if player is not on the ground anymore
				MoveFactor *= CrouchTime <= (Player.OnGround ? 18 : 12) && CrouchSlide ? 15 - CrouchTime / (Player.OnGround ? 5 : 3) : 0.7;
			}

			forwardmove = fm * movefactor * (35 / TICRATE);
			sidemove = sm * movefactor * (35 / TICRATE);

			if (forwardmove)
			{
				Bob(Angle, cmd.forwardmove * bobfactor / 256., true);
				ForwardThrust(forwardmove, Angle);
			}
			if (sidemove)
			{
				let a = Angle - 90;
				Bob(a, cmd.sidemove * bobfactor / 256., false);
				Thrust(sidemove, a);
			}

			if (!(player.cheats & CF_PREDICTING) && (forwardmove != 0 || sidemove != 0))
			{
				PlayRunning ();
			}

			if (player.cheats & CF_REVERTPLEASE)
			{
				player.cheats &= ~CF_REVERTPLEASE;
				player.camera = player.mo;
			}
		}
	}		
	
}